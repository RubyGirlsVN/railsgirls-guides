---
layout: default
title: Test ứng dụng với RSpec
permalink: testing-rspec
---

# Test ứng dụng với RSpec

*Viết bởi Clemens Helm, [@clemenshelm](https://twitter.com/clemenshelm) and Floor Drees, [@floordrees](https://twitter.com/floordrees)*

RSpec là một framework test cho Ruby, nó mô tả các hành vi của ứng dụng bằng một loại cú pháp không giống cú pháp của Ruby cho lắm. RSpec output kết quả test ra terminal nên bạn cũng sẽ được test kĩ năng đọc của mình luôn .

**Huấn luyện viên**: Nói về test phần mềm và Behavior-Driven Development (BDD).

## Cài đặt RSpec

Để bắt đầu, chúng ta hãy cùng cài đặt RSpec và các dependencies của nó:

{% highlight sh %}
gem install rspec
{% endhighlight %}

Sau đó chạy:

{% highlight sh %}
rspec --init
{% endhighlight %}

trong thư mục của dự án đang làm. Lệnh này sẽ tạo ra tệp tin `spec_helper.rb` trong thư mục `spec`, và tệp tin `.rspec`.

Rubyists (các lập trình viên Ruby) thường sử dụng hai từ "test" và "đặc tả kĩ thuật" (specification) thay thế qua lại, vì thế các test thường được lưu trữ trong thư mục `specs`. Lưu test bạn vừa viết với tên `idea_spec.rb` (`<name_of_spec>_spec.rb`).

Trong tệp tin mới vừa tạo, nhập:

{% highlight ruby %}
require "spec_helper"
require "idea"
{% endhighlight %}

Tiếp theo hãy mô tả một trong số các đặc tả kĩ thuật (specification)

{% highlight ruby %}
describe Idea do
  it "has a title" # your examples (tests) go here
end
{% endhighlight %}

Trong terminal chạy:

{% highlight sh %}
rspec spec/lib/idea_spec.rb
{% endhighlight %}

Lệnh này sẽ output rằng test của bạn đang ở trạng thái `pending` vì bạn chưa triển khai test.

**Huấn luyện viên**: Nói về googling (tìm kiếm bằng Google) các output từ terminal.

Hãy cùng triển khai test case đầu tiên:

{% highlight ruby %}
describe Idea do
  it "has a title" do # yep, you can totally use 'it'
    idea = Idea.new # creating a new idea 'instance'
    idea.title.should be_true # this is our expectation
  end
end
{% endhighlight %}

Chạy lại lệnh phía trên sẽ cho ra output thỏa mãn mục tiêu của bạn.

### Refactoring

Bạn có thể viết như sau:

{% highlight ruby %}
describe Idea do
  its(:title) { should be_true }
end
{% endhighlight %}

trông sẽ đẹp hơn rất nhiều, mặc dù có rất nhiều "phép màu" xảy ra ở đoạn code này. Hiện tại, bạn không cần quan tâm nhiều đến những "phép màu" đó, hãy vui vẻ vì chúng ta có thể "refactor" những đoạn code dài thành những đoạn nhỏ đẹp đẽ chỉ với một chút kinh nghiệm.

**Huấn luyện viên**: Nói một chút về refactoring.

### Đánh dấu các test

Giống như to-do lists, có những test case bạn chưa muốn triển khai ngay. RSpec có một tính năng tiện lợi giúp bạn đánh dấu trạng thái `pending` cho các test cụ thể.

Bỏ `do` và `end` khỏi nội dung của test case như sau

{% highlight ruby %}
it "has a title"
{% endhighlight %}

sẽ đánh dấu test case đó ở trạng thái pending. Với các ứng dụng lớn hơn, khi mà bạn chỉ muốn xử lí từng test mỗi lần, bạn có thể thêm kí tự `x` trước test case như sau:

{% highlight ruby %}
describe Idea do
  xit "has a title" do
end
{% endhighlight %}

hoặc dùng từ `pending` trong test case.

## Behavior-Driven Development (BDD)

Thường thì chúng ta sẽ thực hiện BDD testing hơi khác một chút. Suy nghĩ về ứng dụng chúng ta muốn xây dựng, chúng ta sẽ viết những kì vọng của chúng ta về ứng dụng trước rồi bắt đầu xây dựng từng bước, với các đặc tả kĩ thuật trong đầu.

Ban đầu chúng ta viết

{% highlight ruby %}
describe Idea do
  it "has a title"
    idea = Idea.new
    idea.title.should be_true
    # or, alternatively: idea.title.should == true
  end
end
{% endhighlight %}

và sau đó tạo tệp tin `idea.rb` khai báo class `Idea `

{% highlight ruby %}
class Idea
attr_accessor  :title
end
{% endhighlight %}

vì chạy `rspec spec/lib/idea_spec.rb` trong terminal trước khi tạo class `Idea` sẽ output ra lỗi.  May mắn là các lỗi không phải là thứ gì đáng sợ. Lỗi trong RSpec thực tế giúp bạn viết các đoạn code cần thiết.

Hãy thử viết test cho các hướng dẫn tiếp theo để kiểm tra xem bạn có triển khai đúng TẤT CẢ mọi thứ không.

{% highlight ruby %}
describe Attendee do
  it "tests everything"
end
{% endhighlight %}

Nói vậy thôi :D

Happy testing!
